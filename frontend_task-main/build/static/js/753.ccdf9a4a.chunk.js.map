{"version":3,"file":"static/js/753.ccdf9a4a.chunk.js","mappings":"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","sources":["db/initDB.js","mocks/handlers.js","mocks/browser.js"],"sourcesContent":["const dbName = \"UserDB\";\nconst dbVersion = 1;\nconst storeName = \"users\";\n\nfunction initiateDB() {\n  let db;\n\n  const request = indexedDB.open(dbName, dbVersion);\n\n  request.onerror = (event) => {\n    console.error(\"IndexedDB error:\", event.target.error);\n  };\n\n  request.onsuccess = (event) => {\n    db = event.target.result;\n    console.log(\"IndexedDB reasy to use!\");\n  };\n\n  request.onupgradeneeded = (event) => {\n    db = event.target.result;\n    if (!db.objectStoreNames.contains(storeName)) {\n      const store = db.createObjectStore(storeName, {\n        keyPath: \"id\",\n        autoIncrement: true,\n      });\n      store.createIndex(\"name\", \"name\", { unique: false });\n      store.createIndex(\"email\", \"email\", { unique: true });\n    }\n  };\n\n  const addUser = (user) => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([storeName], \"readwrite\");\n      const store = transaction.objectStore(storeName);\n      const emailIndex = store.index(\"email\");\n      emailIndex.get(user.email).onsuccess = (event) => {\n        if (event.target.result) {\n          console.error(\"Email already exists:\", user.email);\n          reject({\n            success: false,\n            message: `Email already exists: ${user.email}`,\n          });\n        } else {\n          const request = store.add(user);\n          request.onsuccess = (event) => {\n            resolve({\n              success: true,\n              result: event.target.result,\n            });\n          };\n          request.onerror = (event) => {\n            reject({\n              success: false,\n              message: event.target.error,\n            });\n          };\n        }\n      };\n    });\n  };\n\n  const getUsers = () => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([storeName], \"readonly\");\n      const store = transaction.objectStore(storeName);\n      const request = store.getAll();\n\n      request.onsuccess = (event) => {\n        resolve(event.target.result);\n      };\n\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  };\n\n  const editUser = (id, updatedUser) => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([storeName], \"readwrite\");\n      const store = transaction.objectStore(storeName);\n      const request = store.get(parseInt(id));\n      request.onsuccess = (event) => {\n        const user = event.target.result;\n        if (user) {\n          const updatedUserData = { ...user, ...updatedUser };\n          const updateRequest = store.put(updatedUserData);\n          updateRequest.onsuccess = (event) => {\n            resolve({\n              success: true,\n              result: event.target.result,\n            });\n          };\n          updateRequest.onerror = (event) => {\n            reject({\n              success: false,\n              message: event.target.error,\n            });\n          };\n        } else {\n          reject({\n            success: false,\n            message: `User not found with id: ${id}`,\n          });\n        }\n      };\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  };\n\n  const deleteUser = (id) => {\n    return new Promise((resolve, reject) => {\n      console.log(\"deleteUser\", id);\n      try {\n        const transaction = db.transaction([storeName], \"readwrite\");\n        const store = transaction.objectStore(storeName);\n        const request = store.delete(parseInt(id));\n        request.onsuccess = (event) => {\n          console.log(\"deleteUser success\", event);\n          resolve({\n            success: true,\n            result: event.target.result,\n          });\n        };\n        request.onerror = (event) => {\n          reject({\n            success: false,\n            message: event.target.error,\n          });\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  };\n\n  return { addUser, getUsers, editUser, deleteUser };\n}\n\nexport default initiateDB;\n","// src/mocks/handlers.js\nimport { http, HttpResponse } from \"msw\";\nimport initiateDB from \"../db/initDB\";\n\nconst { addUser, getUsers, editUser, deleteUser } = initiateDB();\n\nexport const handlers = [\n  http.get(\"http://example.com/users\", async () => {\n    const users = await getUsers();\n    return HttpResponse.json(users);\n  }),\n\n  http.post(\"http://example.com/user\", async ({ request }) => {\n    const newUser = await request.json();\n    if (!newUser.name || !newUser.email) {\n      return HttpResponse.json({\n        success: false,\n        message: \"Name and email is required\",\n      });\n    }\n    const resp = await addUser(newUser);\n    return HttpResponse.json(resp);\n  }),\n\n  http.put(\"http://example.com/user/:id\", async ({ params, request }) => {\n    const { id } = params;\n    const newData = await request.json();\n    if (!id) {\n      return HttpResponse.json({ success: false, message: \"Id is required\" });\n    }\n    if (!newData.name || !newData.email) {\n      return HttpResponse.json({\n        success: false,\n        message: \"Name and email is required\",\n      });\n    }\n    const resp = await editUser(id, newData);\n    return HttpResponse.json(resp);\n  }),\n\n  http.delete(\"http://example.com/user/:id\", async ({ params }) => {\n    const { id } = params;\n    if (!id) {\n      return HttpResponse.json({ success: false, message: \"Id is required\" });\n    }\n    const resp = await deleteUser(id);\n    return HttpResponse.json(resp);\n  }),\n];\n","import { setupWorker } from \"msw/browser\";\nimport { handlers } from \"./handlers\";\n\nexport const worker = setupWorker(...handlers);\n"],"names":["storeName","db","request","indexedDB","open","onerror","event","console","error","target","onsuccess","result","log","onupgradeneeded","objectStoreNames","contains","store","createObjectStore","keyPath","autoIncrement","createIndex","unique","addUser","user","Promise","resolve","reject","transaction","objectStore","index","get","email","success","message","concat","add","getUsers","getAll","editUser","id","updatedUser","parseInt","updatedUserData","updateRequest","put","deleteUser","delete","e","initiateDB","handlers","http","async","users","HttpResponse","json","post","_ref","newUser","name","resp","params","_ref2","newData","_ref3","worker","setupWorker"],"sourceRoot":""}